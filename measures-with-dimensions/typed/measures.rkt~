#lang typed/racket

(provide (all-defined-out)
         (all-from-out "units.rkt")
         )

(require (only-in plot/typed/utils
                  [v* plot:v*]))

(require "units.rkt")
(require "vector-opperations.rkt")

(define-type Measure (U Number-Measure Vector-Measure (Measureof Number-Or-Vector Dimmension)))

(define-type Number-Or-Vector (U Number (Vectorof Real)))

(define-type Normalized-Measure (Normalized-Measureof Number-Or-Vector Normalized-Dimmension))

(define-type (Measureof Number-or-Vector Dimmension)
  (Maybe-With-Sig-Figs (pmeasure Number-or-Vector (Unitof Dimmension))))

(define-type (Normalized-Measureof Number-or-Vector Dimmension)
  (Maybe-With-Sig-Figs (pmeasure Number-or-Vector (Normalized-Unitof Dimmension))))

(define-type Number-Measure
  (U (Maybe-With-Sig-Figs Number)
     (Number-Measureof Dimmension)))

(define-type Normalized-Number-Measure
  (Normalized-Measureof Number Normalized-Dimmension))

(define-type Vector-Measure (U (Vectorof Real) (Vector-Measureof Dimmension)))

(define-type Normalized-Vector-Measure (Normalized-Measureof (Vectorof Real) Normalized-Dimmension))

(define-type (Number-Measureof Dimmension)
  (Maybe-With-Sig-Figs
   (U Dimmension (Unitof Dimmension)
      (pmeasure Number (Unitof Dimmension)))))

(define-type (Vector-Measureof Dimmension)
  (Maybe-With-Sig-Figs
   (pmeasure (Vectorof Real) (Unitof Dimmension))))

(define-type (Maybe-With-Sig-Figs t)
  (U t (pmeasure+sig-figs t (U Positive-Integer +inf.0))))



(struct: (Num Unit) pmeasure ([number : Num] [unit : Unit])
  #:transparent
  #:property prop:custom-write (lambda (m out mode)
                                 (cond [(zero? mode) (display "(measure " out)
                                                     (print (pmeasure-number m) out)
                                                     (display " " out)
                                                     (print (pmeasure-unit m) out)
                                                     (display ")" out)]
                                       [else (display (pmeasure-number m) out)
                                             (display "*" out)
                                             (display (pmeasure-unit m) out)])))

(struct: (m n) pmeasure+sig-figs ([measure : m] [sig-figs : n])
  #:transparent
  #:property prop:custom-write (lambda (m+sf out mode)
                                 (cond [(or (zero? mode) (one? mode)) (print (pmeasure+sig-figs-measure m+sf) out mode)]
                                       [((make-predicate #t) mode)    (write (pmeasure+sig-figs-measure m+sf) out)]
                                       [else                          (display (pmeasure+sig-figs-measure m+sf) out)]))
  #:property prop:custom-print-quotable 'maybe)

(define number-measure? (make-predicate Number-Measure))

;(: measure? (Any -> Boolean : Measure))
(: measure-number (case-> (One -> One)
                          (Number -> Number)
                          ((Vectorof Real) -> (Vectorof Real))
                          ;(Dimmension -> One)
                          ;(Unit -> One)
                          ;((Measureof Number Dimmension) -> Number)
                          ;((Measureof (Vectorof Real) Dimmension) -> (Vectorof Real))
                          ;(Number-Measure -> Number)
                          ;(Vector-Measure -> (Vectorof Real))
                          (Measure -> (U Number (Vectorof Real)))))
(: measure-unit (case-> [(U Number (Vectorof Real)) -> (Normalized-Unitof Dimmensionless-Dimmension)]
                        [Measure -> Normalized-Unit]))
(: measure-dimmension (case-> ((U Number (Vectorof Real)) -> Dimmensionless-Dimmension)
                              (Measure -> Dimmension)))
(: measure-sig-figs (Measure -> (U Positive-Integer #f)))

(: measure (case-> [Number Unit [#:sig-figs (U Positive-Integer +inf.0 #f)] -> Normalized-Number-Measure]
                   [(Vectorof Real) Unit [#:sig-figs (U Positive-Integer +inf.0 #f)] -> Normalized-Vector-Measure]
                   [(U Number (Vectorof Real)) Unit [#:sig-figs (U Positive-Integer +inf.0 #f)] -> Normalized-Measure]))
(define (measure num u #:sig-figs [sf #f])
  (cond [sf (pmeasure+sig-figs (pmeasure num (normalize-unit u)) sf)]
        [else (pmeasure num (normalize-unit u))]))
;(define (measure? m)
 ; (or (dimmension? m)
  ;    (unit? m)
   ;   (and (pmeasure? m)
    ;       (let ([n-or-v (pmeasure-number m)])
     ;        (or (number? n-or-v)
      ;           (vectorof-real? n-or-v)))
       ;    (unit? (pmeasure-unit m)))))
(define (measure-number m)
  (cond [(number? m) m]
        [(vector? m) (cast m (Vectorof Real))]
        [(dimmension? m) 1]
        [(unit? m) 1]
        [(number-measure? m) (cond [(number? m) m]
                                   [(dimmension? m) 1]
                                   [(unit? m) 1]
                                   [(pmeasure? m) (cast (pmeasure-number m) Number)]
                                   [(pmeasure+sig-figs? m) (measure-number (pmeasure+sig-figs-measure m))])]
        [else #;(vector-measure? m) (cond [(vector? m) m]
                                   [(pmeasure? m) (cast (pmeasure-number m) (Vectorof Real))]
                                   [(pmeasure+sig-figs? m) (measure-number (pmeasure+sig-figs-measure m))])]
        ;[(pmeasure? m) (pmeasure-number m)]
        ;[(pmeasure+sig-figs? m) (measure-number (pmeasure+sig-figs-measure m))]
        ))
(define (measure-unit m)
  (cond [(number? m) (p-unit 1 1 dimmensionless-dimmension)]
        [(vector? m) (p-unit 1 1 dimmensionless-dimmension)]
        [(dimmension? m) (normalize-unit m)]
        [(unit? m) (normalize-unit m)]
        [(pmeasure? m) (normalize-unit (pmeasure-unit m))]
        [(pmeasure+sig-figs? m) (measure-unit (pmeasure+sig-figs-measure m))]
        ))
(define (measure-dimmension m)
  (p-unit-dimmension (measure-unit m)))
(define (measure-sig-figs m)
  (cond [(pmeasure+sig-figs? m) (let ([m.sig-figs : (U Positive-Integer +inf.0) (pmeasure+sig-figs-sig-figs m)])
                                  (if (exact-positive-integer? m.sig-figs)
                                      m.sig-figs
                                      #f))]
        [else #f]))

(: measure=? (Measure Measure * -> Boolean))
(define (measure=? m . rst)
  (let: ([m.number : (U Number (Vectorof Real)) (measure-number m)]
         [m.unit : Unit (measure-unit m)])
    (let: ([m.dimmension : Dimmension (unit-dimmension m.unit)])
      (cond [(number? m.number) (let: ([m.number*u.scalar : Number (* m.number (unit-scalar m.unit))])
                                  (for/and: : Boolean ([m2 : (U Number (Vectorof Real) Measure) (in-list rst)])
                                    (let: ([m2.number : (U Number (Vectorof Real)) (measure-number m2)]
                                           [m2.unit : Unit (measure-unit m2)])
                                      (and (number? m2.number)
                                           (let: ([m2.number*u2.scalar : Number (* m2.number (unit-scalar m2.unit))]
                                                  [m2.dimmension : Dimmension (unit-dimmension m2.unit)])
                                             (and (= m.number*u.scalar m2.number*u2.scalar)
                                                  (dimmension=? m.dimmension m2.dimmension)))))))]
            [(vector? m.number) (let: ([m.number*u.scalar : (Vectorof Real) (plot:v* m.number (unit-scalar m.unit))])
                                  (for/and: : Boolean ([m2 : (U Number (Vectorof Real) Measure) (in-list rst)])
                                    (let: ([m2.number : (U Number (Vectorof Real)) (measure-number m2)]
                                           [m2.unit : Unit (measure-unit m2)])
                                      (and (vector? m2.number)
                                           (let: ([m2.number*u2.scalar : (Vectorof Real) (plot:v* m2.number (unit-scalar m2.unit))]
                                                  [m2.dimmension : Dimmension (unit-dimmension m2.unit)])
                                             (and (v=? m.number*u.scalar m2.number*u2.scalar)
                                                  (dimmension=? m.dimmension m2.dimmension)))))))]
            ))))

(: convert (case-> (Number-Measure Unit -> Number-Measure)
                   (Measure Unit -> Measure)
                   ((U Number (Vectorof Real)) Unit Unit -> Measure)))
(define convert
  (case-lambda
    [(n u2) (cond [(not (dimmension=? (measure-dimmension n) (unit-dimmension u2)))
                   (error "convert: cannot convert between dimensions, given:" n u2)]
                  [(number-measure? n) (let: ([num : Number (cast (measure-number n) Number)]
                                              [u1 : Unit (measure-unit n)])
                                         (measure (* num (/ (unit-scalar u1)
                                                            (unit-scalar u2)))
                                                  u2
                                                  #:sig-figs (measure-sig-figs n)))]
                  [else (let: ([num : (Vectorof Real) (cast (measure-number n) (Vectorof Real))]
                                              [u1 : Unit (measure-unit n)])
                                         (measure (plot:v* num (/ (unit-scalar u1)
                                                                  (unit-scalar u2)))
                                                  u2
                                                  #:sig-figs (measure-sig-figs n)))]
                  #;[else
                   (let: ([num : (U Number (Vectorof Real)) (measure-number n)]
                          [u1 : Unit (measure-unit n)])
                     (measure (cond [(number? num) (* num (/ (unit-scalar u1)
                                                             (unit-scalar u2)))]
                                    [(vector? num) (plot:v* num (/ (unit-scalar u1)
                                                                   (unit-scalar u2)))])
                              u2
                              #:sig-figs (measure-sig-figs n)))])]
    [(n u1 u2) (convert (measure n u1) u2)]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-type Length
  (Measureof (U Real (Vectorof Real)) Length-Dimmension))
(define-type Mass
  (Measureof Nonnegative-Real Mass-Dimmension))
(define-type Time
  (Measureof Real Time-Dimmension))
(define-type Charge
  (Measureof Real Charge-Dimmension))
(define-type Absolute-Temperature
  (Measureof Nonnegative-Real Temperature-Dimmension))

(define-type Area
  (Measureof Nonnegative-Real Area-Dimmension))
(define-type Volume
  (Measureof Nonnegative-Real Volume-Dimmension))

(define-type Mass-Density
  (Measureof Nonnegative-Real Mass-Density-Dimmension))
(define-type Charge-Density
  (Measureof Real Charge-Density-Dimmension))

(define-type Velocity
  (Measureof (U Real (Vectorof Real)) Velocity-Dimmension))
(define-type Speed
  (Measureof Nonnegative-Real Velocity-Dimmension))
(define-type Acceleration
  (Measureof (U Real (Vectorof Real)) Acceleration-Dimmension))
(define-type Force
  (Measureof (U Real (Vectorof Real)) Force-Dimmension))
(define-type Momentum
  (Measureof (U Real (Vectorof Real)) Momentum-Dimmension))

(define-type Energy
  (Measureof Real Energy-Dimmension))
(define-type Work Energy)
(define-type Power
  (Measureof Real Power-Dimmension))

(define-type Pressure
  (Measureof Nonnegative-Real Pressure-Dimmension))

(define-type Entropy
  (Measureof Real Entropy-Dimmension))

(define-type Electric-Field
  (Measureof (U Real (Vectorof Real)) Electric-Field-Dimmension))
(define-type Electric-Potential
  (Measureof Real Electric-Potential-Dimmension))
(define-type Voltage Electric-Potential)
(define-type Emf Voltage)
(define-type Capacitance
  (Measureof Nonnegative-Real Capacitance-Dimmension))

(define-type Current
  (Measureof Real Current-Dimmension))
(define-type Current-Density
  (Measureof (U Real (Vectorof Real)) Current-Density-Dimmension))
(define-type Resistance
  (Measureof Nonnegative-Real Resistance-Dimmension))
(define-type Resistivity
  (Measureof Nonnegative-Real Resistivity-Dimmension))
(define-type Conductivity
  (Measureof Nonnegative-Real Conductivity-Dimmension))

(define-type Magnetic-Field
  (Measureof (U Real (Vectorof Real)) Magnetic-Field-Dimmension))

(define-type Electric-Flux
  (Measureof Real Electric-Flux-Dimmension))
(define-type Magnetic-Flux
  (Measureof Real Magnetic-Flux-Dimmension))

(define-type Inductance
  (Measureof Nonnegative-Real Inductance-Dimmension))


