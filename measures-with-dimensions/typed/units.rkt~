#lang typed/racket

(provide (all-defined-out)
         (all-from-out "dimmensions.rkt")
         )

(require "dimmensions.rkt")

(require syntax/parse/define)

(require/typed typed/racket
               [~a (Any -> String)])

(: 10^ (case-> (Zero -> One)
               (Real -> Real)
               (Natural -> Natural)
               (Integer -> Exact-Rational)
               (Number -> Number)))
(define (10^ n)
  (expt 10 n))

(define positive-real? (make-predicate Positive-Real))



(define-type (Unitof Dimmension)
  (U Dimmension (Normalized-Unitof Dimmension)))
(define-type Unit
  (U Positive-Real (Unitof Dimmension)))
(define-type (Normalized-Unitof Dimmension)
  (p-unit Dimmension))
(define-type Normalized-Unit
  (Normalized-Unitof Normalized-Dimmension))

(: normalize-unit : (Unit -> Normalized-Unit))
(define (normalize-unit u)
  (cond [(normalized-unit? u) u]
        [(p-unit? u) (p-unit (p-unit-name u)
                             (p-unit-scalar u)
                             (normalize-dimmension (p-unit-dimmension u)))]
        [(positive-real? u) (unit #f u dimmensionless-dimmension)]
        [(dimmension? u) (unit #f 1 (normalize-dimmension u))]))




(struct: (Dimmension) p-unit ([name : (U Any #f)] [scalar : Positive-Real] [dimmension : Dimmension])
  #:transparent
  #:property prop:custom-write (lambda (u out mode)
                                 (let ([name (p-unit-name u)])
                                   (cond [name (display name out)]
                                         [(zero? mode) (display "(unit #f " out)
                                                       (print (p-unit-scalar u) out) (display " " out)
                                                       (print (p-unit-dimmension u) out)
                                                       (display ")" out)]
                                         [else (display (p-unit-scalar u) out)
                                               (display "*" out)
                                               (display (p-unit-dimmension u) out)]))))

(: normalized-unit? (Any -> Boolean : Normalized-Unit))
(define normalized-unit? (make-predicate Normalized-Unit))

(: unit ((U Any #f) Positive-Real Dimmension -> (p-unit Normalized-Dimmension)))
(: unit? (Any -> Boolean : Unit))
(: unit-name (case-> (Dimmension -> #f)
                     (Unit -> (U Any #f))))
(: unit-scalar (case-> (Dimmension -> One)
                       (Unit -> Positive-Real)))
(: unit-dimmension (case-> (Positive-Real -> Dimmensionless-Dimmension)
                           (Unit -> Normalized-Dimmension)))
(define (unit name scalar dimmension)
  ((inst p-unit Normalized-Dimmension) name scalar (normalize-dimmension dimmension)))
(define unit? (make-predicate Unit))
(define (unit-name u)
  (cond [(positive-real? u) #f]
        [(dimmension? u) #f]
        [(unit? u) (p-unit-name u)]))
(define (unit-scalar u)
  (cond [(positive-real? u) u]
        [(dimmension? u) 1]
        [(unit? u) (p-unit-scalar u)]))
(define (unit-dimmension u)
  (cond [(positive-real? u) dimmensionless-dimmension]
        [(dimmension? u) (normalize-dimmension u)]
        [(unit? u) (normalize-dimmension (p-unit-dimmension u))]))

(: unit=? (Unit Unit * -> Boolean))
(define (unit=? u . rst)
  (let: ([u.scalar : Positive-Real (unit-scalar u)]
         [u.dimmension : Normalized-Dimmension (unit-dimmension u)])
    (for/and: : Boolean ([u2 : Unit (in-list rst)])
      (and (= u.scalar (unit-scalar u2))
           (dimmension=? u.dimmension (unit-dimmension u2))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-type Length-Unit
  (Unitof Length-Dimmension))
(define-type Mass-Unit
  (Unitof Mass-Dimmension))
(define-type Time-Unit
  (Unitof Time-Dimmension))
(define-type Charge-Unit
  (Unitof Charge-Dimmension))
(define-type Absolute-Temperature-Unit
  (Unitof Temperature-Dimmension))

(define-type Area-Unit
  (Unitof Area-Dimmension))
(define-type Volume-Unit
  (Unitof Volume-Dimmension))

(define-type Mass-Density-Unit
  (Unitof Mass-Density-Dimmension))
(define-type Charge-Density-Unit
  (Unitof Charge-Density-Dimmension))

(define-type Velocity-Unit
  (Unitof Velocity-Dimmension))
(define-type Acceleration-Unit
  (Unitof Acceleration-Dimmension))
(define-type Force-Unit
  (Unitof Force-Dimmension))
(define-type Momentum-Unit
  (Unitof Momentum-Dimmension))

(define-type Energy-Unit
  (Unitof Energy-Dimmension))
(define-type Work-Unit
  Energy-Unit)
(define-type Power-Unit
  (Unitof Power-Dimmension))

(define-type Pressure-Unit
  (Unitof Pressure-Dimmension))

(define-type Entropy-Unit
  (Unitof Entropy-Dimmension))

(define-type Electric-Field-Unit
  (Unitof Electric-Field-Dimmension))
(define-type Electric-Potential-Unit
  (Unitof Electric-Potential-Dimmension))
(define-type Voltage-Unit
  Electric-Potential-Unit)
(define-type Emf-Unit
  Voltage-Unit)
(define-type Capacitance-Unit
  (Unitof Capacitance-Dimmension))

(define-type Current-Unit
  (Unitof Current-Dimmension))
(define-type Current-Density-Unit
  (Unitof Current-Density-Dimmension))
(define-type Resistance-Unit
  (Unitof Resistance-Dimmension))
(define-type Resistivity-Unit
  (Unitof Resistivity-Dimmension))
(define-type Conductivity-Unit
  (Unitof Conductivity-Dimmension))

(define-type Magnetic-Field-Unit
  (Unitof Magnetic-Field-Dimmension))

(define-type Electric-Flux-Unit
  (Unitof Electric-Flux-Dimmension))
(define-type Magnetic-Flux-Unit
  (Unitof Magnetic-Flux-Dimmension))

(define-type Inductance-Unit
  (Unitof Inductance-Dimmension))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(: unit-rename : (Unit Any -> Unit))
(define (unit-rename u name)
  (unit name
        (unit-scalar u)
        (unit-dimmension u)))

(define-simple-macro (define-unit: u:id (~literal :) t:expr val:expr)
  (define: u : t (cast (unit-rename val 'u) t)))

(: usqr (Unit -> Unit))
(define (usqr u)
  (cond [(one? u) 1]
        [else (unit (string-append "(usqr "(~a u)")")
                    (cast (sqr (unit-scalar u)) Positive-Real)
                    (dsqr (unit-dimmension u)))]))

(: usqrt (Unit -> Unit))
(define (usqrt u)
  (cond [(one? u) 1]
        [else (unit (string-append "(usqrt "(~a u)")")
                    (cast (sqrt (unit-scalar u)) Positive-Real)
                    (dsqrt (unit-dimmension u)))]))

(: uexpt (Unit Exact-Rational -> Unit))
(define (uexpt u n)
  (cond [(one? u) 1]
        [(zero? n) 1]
        [(one? n) u]
        [else (unit (string-append "(uexpt "(~a u)" "(~a n)")")
                    (cast (expt (unit-scalar u) n) Positive-Real)
                    (dexpt (unit-dimmension u) n))]))

(: u* (Unit * -> Unit))
(define (u* . args)
  (cond [(empty? args) 1]
        [(one? (length args)) (first args)]
        [else (unit (string-append "(u* "(string-join (map ~a args))")")
                    (cast (apply * (map unit-scalar args)) Positive-Real)
                    (apply d* (map unit-dimmension args)))]))

(define-simple-macro (defprefix prefix:id factor-expr:expr)
  (define: prefix : (Unit -> Unit)
    (let: ([|"(prefix "| : String (string-append "("(symbol->string 'prefix)" ")]
           [factor : Positive-Real (cast factor-expr Positive-Real)])
      (lambda: ([u : Unit])
        (unit (string-append |"(prefix "|(~a u)")")
              (cast (* factor (unit-scalar u)) Positive-Real)
              (unit-dimmension u)))))
  ;(define: prefix : (All (d) ((Unitof d) -> (Unitof d)))
  ;  (let: ([|"(prefix "| : String (string-append "("(symbol->string 'prefix)" ")]
  ;         [factor : Positive-Real (cast factor-expr Positive-Real)])
  ;    (cast (lambda: ([u : Unit])
  ;            (unit (string-append |"(prefix "|(~a u)")")
  ;                  (cast (* factor (unit-scalar u)) Positive-Real)
  ;                  (unit-dimmension u)))
  ;          (All (d) ((Unitof d) -> (Unitof d))))))
  )

(defprefix deci 1/10)
(defprefix centi 1/100)
(defprefix milli 1/1000)
(defprefix micro (10^ -6))
(defprefix nano (10^ -9))
(defprefix pico (10^ -12))
(defprefix femto (10^ -15))
(defprefix atto (10^ -18))
(defprefix zepto (10^ -21))
(defprefix yocto (10^ -24))
(defprefix deca 10)
(defprefix hecto 100)
(defprefix kilo 1000)
(defprefix mega (10^ 6))
(defprefix giga (10^ 9))
(defprefix tera (10^ 12))
(defprefix peta (10^ 15))
(defprefix exa (10^ 18))
(defprefix zetta (10^ 21))
(defprefix yotta (10^ 24))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; SI units:

(define-unit: meter : Length-Unit (unit 'meter 1 length-dimmension))
(define-unit: kilogram : Mass-Unit (unit 'kilogram 1 mass-dimmension)) (define-unit: gram : Mass-Unit (unit 'gram 1/1000 mass-dimmension))
(define-unit: second : Time-Unit (unit 'second 1 time-dimmension))
(define-unit: columb : Charge-Unit (unit 'columb 1 charge-dimmension))
(define-unit: kelvin : Absolute-Temperature-Unit (unit 'kelvin 1 temperature-dimmension))

(define-unit: newton : Force-Unit (unit 'newton 1 force-dimmension))

(define-unit: joule : Energy-Unit (unit 'joule 1 energy-dimmension))
(define-unit: watt : Power-Unit (unit 'watt 1 power-dimmension))

(define-unit: pascal : Pressure-Unit (unit 'pascal 1 pressure-dimmension))

(define-unit: volt : Voltage-Unit (unit 'volt 1 voltage-dimmension))
(define-unit: farrad : Capacitance-Unit (unit 'farrad 1 capacitance-dimmension))

(define-unit: ampere : Current-Unit (unit 'ampere 1 current-dimmension))

(define-unit: ohm : Resistance-Unit (unit 'ohm 1 resistance-dimmension))

(define-unit: tesla : Magnetic-Field-Unit (unit 'tesla 1 magnetic-field-dimmension))

(define-unit: henry : Inductance-Unit (unit 'henry 1 inductance-dimmension))


