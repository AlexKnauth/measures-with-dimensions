#lang typed/racket (require (for-syntax racket/base))

(provide (all-defined-out))

(require syntax/parse/define)

(define-simple-macro (def/cast: id:id (~literal :) t:expr val:expr)
  (define: id : t (cast val t)))

(define zero? (make-predicate Zero))
(define one? (make-predicate One))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-type Dimmension
  (U 1
     Dimmension-Symbol
     Normalized-Dimmension))

(define-type Dimmension-Symbol
  (U 1
     'length-dimmension        ; a meter
     'mass-dimmension          ; a kilogram
     'time-dimmension          ; a second
     'charge-dimmension        ; a columb
     'temperature-dimmension)) ; a kelvin
(define dimmension-symbol? (make-predicate Dimmension-Symbol))

(: make-pdimmension : (All (Length-Expt Mass-Expt Time-Expt Charge-Expt Temp-Expt)
                           (#:length^ Length-Expt #:mass^ Mass-Expt #:time^ Time-Expt #:charge^ Charge-Expt #:temperature^ Temp-Expt
                                      -> (pdimmension Length-Expt Mass-Expt Time-Expt Charge-Expt Temp-Expt)
                                      )))
(define (make-pdimmension #:length^ length-expt
                          #:mass^ mass-expt
                          #:time^ time-expt
                          #:charge^ charge-expt
                          #:temperature^ temp-expt)
  (pdimmension length-expt mass-expt time-expt charge-expt temp-expt))
(define (make-dimmension #:length^ [length-expt : Integer 0]
                         #:mass^ [mass-expt : Integer 0]
                         #:time^ [time-expt : Integer 0]
                         #:charge^ [charge-expt : Integer 0]
                         #:temperature^ [temp-expt : Integer 0]) : Normalized-Dimmension
  (pdimmension length-expt mass-expt time-expt charge-expt temp-expt))

(define-type Normalized-Dimmension
  (pdimmension Integer Integer Integer Integer Integer))
(define-type Dimmensionless-Dimmension
  (pdimmension 0 0 0 0 0))
(define-type (Length^ n)
  (pdimmension n 0 0 0 0))
(define-type (Mass^ n)
  (pdimmension 0 n 0 0 0))
(define-type (Time^ n)
  (pdimmension 0 0 n 0 0))
(define-type (Charge^ n)
  (pdimmension 0 0 0 n 0))
(define-type (Temperature^ n)
  (pdimmension 0 0 0 0 n))
(define-type Length-Dimmension
  (Length^ 1))
(define-type Mass-Dimmension
  (Mass^ 1))
(define-type Time-Dimmension
  (Time^ 1))
(define-type Charge-Dimmension
  (Charge^ 1))
(define-type Temperature-Dimmension
  (Temperature^ 1))
(struct: (Length-Expt Mass-Expt Time-Expt Charge-Expt Temp-Expt)
  pdimmension
  ([length-expt : Length-Expt]
   [mass-expt   : Mass-Expt]
   [time-expt   : Time-Expt]
   [charge-expt : Charge-Expt]
   [temperature-expt : Temp-Expt])
  #:transparent
  #:property prop:custom-write (lambda (d out mode)
                                 (define true? (make-predicate #t))
                                 (define (write-sub str expt [mode mode])
                                   (cond [(zero? expt) (display 1 out)]
                                         [(one? expt) (display str out)]
                                         [(zero? mode) (display "(" out)
                                                       (display str out)
                                                       (display "^ " out)
                                                       (display expt out)
                                                       (display ")" out)]
                                         [else (display str out)
                                               (display "^" out)
                                               (display expt out)]))
                                 (define (display-sub str expt)
                                   (write-sub str expt #f))
                                 (let ([d.length-expt (pdimmension-length-expt d)]
                                       [d.mass-expt (pdimmension-mass-expt d)]
                                       [d.time-expt (pdimmension-time-expt d)]
                                       [d.charge-expt (pdimmension-charge-expt d)]
                                       [d.temp-expt (pdimmension-charge-expt d)])
                                   (cond [(= 0 d.length-expt d.mass-expt d.time-expt d.charge-expt d.temp-expt)
                                          (display "(d 1)" out)]
                                         [(= 0 d.mass-expt d.time-expt d.charge-expt d.temp-expt)
                                          (write-sub "length" d.length-expt)]
                                         [(= 0 d.length-expt d.time-expt d.charge-expt d.temp-expt)
                                          (write-sub "mass" d.mass-expt)]
                                         [(= 0 d.length-expt d.mass-expt d.charge-expt d.temp-expt)
                                          (write-sub "time" d.time-expt)]
                                         [(= 0 d.length-expt d.mass-expt d.time-expt d.temp-expt)
                                          (write-sub "charge" d.charge-expt)]
                                         [(= 0 d.length-expt d.mass-expt d.time-expt d.charge-expt)
                                          (write-sub "temperature" d.temp-expt)]
                                         [else
                                          (define (maybe-write-sub str expt)
                                            (cond [(zero? expt) (void)]
                                                  [else (display " " out)
                                                        (display-sub str expt)]))
                                          (display "(d*" out)
                                          (maybe-write-sub "length" d.length-expt)
                                          (maybe-write-sub "mass" d.mass-expt)
                                          (maybe-write-sub "time" d.time-expt)
                                          (maybe-write-sub "charge" d.charge-expt)
                                          (maybe-write-sub "temperature" d.temp-expt)
                                          (display ")" out)]
                                         )))
  )

(define dimmensionless-dimmension? (make-predicate Dimmensionless-Dimmension))
(define normalized-dimmension? (make-predicate Normalized-Dimmension))
(define dimmension? (make-predicate Dimmension))

(define dimmension-length-expt (inst pdimmension-length-expt Integer Integer Integer Integer Integer))
(define dimmension-mass-expt   (inst pdimmension-mass-expt   Integer Integer Integer Integer Integer))
(define dimmension-time-expt   (inst pdimmension-time-expt   Integer Integer Integer Integer Integer))
(define dimmension-charge-expt (inst pdimmension-charge-expt Integer Integer Integer Integer Integer))
(define dimmension-temperature-expt (inst pdimmension-temperature-expt Integer Integer Integer Integer Integer))


(: length^ : (All (n) (n -> (Length^ n))))
(: mass^   : (All (n) (n -> (Mass^ n))))
(: time^   : (All (n) (n -> (Time^ n))))
(: charge^ : (All (n) (n -> (Charge^ n))))
(: temperature^ : (All (n) (n -> (Temperature^ n))))
(define (length^ n)
  (pdimmension n 0 0 0 0))
(define (mass^ n)
  (pdimmension 0 n 0 0 0))
(define (time^ n)
  (pdimmension 0 0 n 0 0))
(define (charge^ n)
  (pdimmension 0 0 0 n 0))
(define (temperature^ n)
  (pdimmension 0 0 0 0 n))

#;(: pdimmension-map : (All (a1 ... 1n b c d e)
                          [(case-> (a1 -> a2)
                                   (b1 -> b2)
                                   (c1 -> c2))]))

(: dimmension-map : (All (n ...) [(Integer ... n -> Integer) Dimmension ... n -> Normalized-Dimmension]))
(define (dimmension-map f . ds)
  (let ([ds (map normalize-dimmension ds)])
    (make-dimmension #:length^      (apply f (map dimmension-length-expt ds))
                     #:mass^        (apply f (map dimmension-mass-expt   ds))
                     #:time^        (apply f (map dimmension-time-expt   ds))
                     #:charge^      (apply f (map dimmension-charge-expt ds))
                     #:temperature^ (apply f (map dimmension-temperature-expt ds)))))

#|
(: dimmension-product-map (((U Dimmension-Symbol Dimmension-Expt) * -> (U Dimmension-Symbol Dimmension-Expt)) Dimmension * -> Dimmension-Product))
(define (dimmension-product-map f . ds)
  (let ([dps ((inst map1 Dimmension Dimmension-Product) dimmension->dimmension-product (cast ds (Listof Dimmension)))]
        [map-for-length (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'length-dimmension))]
        [map-for-mass   (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'mass-dimmension))]
        [map-for-time   (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'time-dimmension))]
        [map-for-charge (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'charge-dimmension))]
        [map-for-temp   (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'temperature-dimmension))])
    (dimmension-product (cast (apply f (map-for-length dimmension-product-length^n      dps)) (Dimmension-Symbol-Or-Expt 'length-dimmension))
                        (cast (apply f (map-for-mass   dimmension-product-mass^n        dps)) (Dimmension-Symbol-Or-Expt 'mass-dimmension))
                        (cast (apply f (map-for-time   dimmension-product-time^n        dps)) (Dimmension-Symbol-Or-Expt 'time-dimmension))
                        (cast (apply f (map-for-charge dimmension-product-charge^n      dps)) (Dimmension-Symbol-Or-Expt 'charge-dimmension))
                        (cast (apply f (map-for-temp   dimmension-product-temperature^n dps)) (Dimmension-Symbol-Or-Expt 'temperature-dimmension))
                        )))
(: dimmension-product-for-each (((U 1 Dimmension-Symbol Dimmension-Expt) * -> Any) Dimmension * -> Void))
(define (dimmension-product-for-each f . ds)
  (define dps (map dimmension->dimmension-product ds))
  (define map-for-length (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'length-dimmension)))
  (define map-for-mass   (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'mass-dimmension)))
  (define map-for-time   (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'time-dimmension)))
  (define map-for-charge (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'charge-dimmension)))
  (define map-for-temp   (inst map1 Dimmension-Product (Dimmension-Symbol-Or-Expt 'temperature-dimmension)))
  (apply f (map-for-length dimmension-product-length^n dps))
  (apply f (map-for-mass   dimmension-product-mass^n dps))
  (apply f (map-for-time   dimmension-product-time^n dps))
  (apply f (map-for-charge dimmension-product-charge^n dps))
  (apply f (map-for-temp   dimmension-product-temperature^n dps))
  (void))
|#


(: normalize-dimmension : (All (a b c d e)
                               (case->
                                [One -> Dimmensionless-Dimmension]
                                [(U 'length-dimmension 'length) -> Length-Dimmension]
                                [(U 'mass-dimmension 'mass) -> Mass-Dimmension]
                                [(U 'time-dimmension 'time) -> Time-Dimmension]
                                [(U 'charge-dimmension 'charge) -> Charge-Dimmension]
                                [(U 'temperature-dimmension 'temperature 'temp-dimmension 'temp) -> Temperature-Dimmension]
                                [(pdimmension a b c d e) -> (pdimmension a b c d e)]
                                [Dimmension -> Normalized-Dimmension])))
(define (normalize-dimmension d)
  (cond [(pdimmension? d) d]
        [(one? d) dimmensionless-dimmension]
        [((make-predicate (U 'length-dimmension 'length)) d) length-dimmension]
        [((make-predicate (U 'mass-dimmension 'mass)) d) mass-dimmension]
        [((make-predicate (U 'time-dimmension 'time)) d) time-dimmension]
        [((make-predicate (U 'charge-dimmension 'charge)) d) charge-dimmension]
        [((make-predicate (U 'temperature-dimmension 'temperature 'temp-dimmension 'temp)) d) temperature-dimmension]))

(define d normalize-dimmension)



(: dimmension=? (Dimmension Dimmension * -> Boolean))
(define (dimmension=? d . rst)
  (let: ([d-n : Normalized-Dimmension (normalize-dimmension d)])
    (for/and: : Boolean ([d2 : Dimmension (in-list rst)])
      (equal? d-n (normalize-dimmension d2)))))

(define d=? dimmension=?)



(: dexpt (case->
          (Dimmension Zero -> Dimmensionless-Dimmension)
          (One Integer -> Dimmensionless-Dimmension)
          (Dimmension Exact-Rational -> Normalized-Dimmension)))
(define (dexpt d n)
  (define (raise-exponent-error n_0)
    (error 'dexpt (string-append
                   "can't have a dimmension with a non-integer exponent" "\n"
                   "  given: ~v" "\n"
                   "  in: (dexpt ~v ~v)" "\n") n_0 d n))
  (let ([d (normalize-dimmension d)])
    (cond [(zero? n) dimmensionless-dimmension]
          [(dimmensionless-dimmension? d) dimmensionless-dimmension]
          [(one? n) d]
          [(pdimmension? d) (dimmension-map (ann (λ ([expt : Integer])
                                                   (let ([new-expt (* expt n)])
                                                     (cond [(exact-integer? new-expt) new-expt]
                                                           [else (raise-exponent-error new-expt)])))
                                                 (Integer -> Integer))
                                            d)]
          )))

(: dsqr (Dimmension -> Normalized-Dimmension))
(define (dsqr d)
  (dexpt d 2))

(: dsqrt (Dimmension -> Normalized-Dimmension))
(define (dsqrt d)
  (dexpt d 1/2))

(: d* (Dimmension * -> Normalized-Dimmension))
(define d*
  (case-lambda
    [() dimmensionless-dimmension]
    [(d) (normalize-dimmension d)]
    [ds (apply dimmension-map + ds)]
    ))

(: d/ (Dimmension * -> Normalized-Dimmension))
(define d/
  (case-lambda
    [() dimmensionless-dimmension]
    [(d) (dimmension-map - d)]
    [(d . rst) 
     (apply dimmension-map - d rst)]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Dimmensions:

(define-type Area-Dimmension (Length^ 2))
(define-type Volume-Dimmension (Length^ 3))

(define-type Mass-Density-Dimmension   (pdimmension -3 1 0 0 0))
(define-type Charge-Density-Dimmension (pdimmension -3 0 0 1 0))

(define-type Velocity-Dimmension     (pdimmension 1 0 -1 0 0))
(define-type Acceleration-Dimmension (pdimmension 1 0 -2 0 0))
(define-type Force-Dimmension        (pdimmension 1 1 -2 0 0))
(define-type Momentum-Dimmension     (pdimmension 1 1 -1 0 0))

(define-type Energy-Dimmension (pdimmension 2 1 -2 0 0))
(define-type Work-Dimmension Energy-Dimmension)
(define-type Power-Dimmension (pdimmension 2 1 -3 0 0))

(define-type Pressure-Dimmension (pdimmension -1 1 -2 0 0))

(define-type Entropy-Dimmension (pdimmension 2 1 -2 0 -1))

(define-type Electric-Field-Dimmension     (pdimmension 1 1 -2 -1 0))
(define-type Electric-Potential-Dimmension (pdimmension 2 1 -2 -1 0))
(define-type Voltage-Dimmension Electric-Potential-Dimmension)
(define-type Emf-Dimmension Voltage-Dimmension)
(define-type Capacitance-Dimmension (pdimmension -2 -1 2 2 0))

(define-type Current-Dimmension         (pdimmension  0  0 -1  1 0))
(define-type Current-Density-Dimmension (pdimmension -2  0 -1  1 0))
(define-type Resistance-Dimmension      (pdimmension  2  1 -1 -2 0))
(define-type Resistivity-Dimmension     (pdimmension  3  1 -1 -2 0))
(define-type Conductivity-Dimmension    (pdimmension -3 -1  1  2 0))

(define-type Magnetic-Field-Dimmension (pdimmension 0 1 -1 -1 0))

(define-type Electric-Flux-Dimmension (pdimmension 3 1 -2 -1 0))
(define-type Magnetic-Flux-Dimmension (pdimmension 2 1 -1 -1 0))

(define-type Inductance-Dimmension (pdimmension 2 1 0 -2 0))



(define: dimmensionless-dimmension : Dimmensionless-Dimmension (pdimmension 0 0 0 0 0))
(define: length-dimmension : Length-Dimmension (length^ 1))
(define: mass-dimmension : Mass-Dimmension (mass^ 1))
(define: time-dimmension : Time-Dimmension (time^ 1))
(define: charge-dimmension : Charge-Dimmension (charge^ 1))
(define: temperature-dimmension : Temperature-Dimmension (temperature^ 1))

(define: area-dimmension : Area-Dimmension ((inst length^ 2) 2))
(define: volume-dimmension : Volume-Dimmension ((inst length^ 3) 3))

(def/cast: mass-density-dimmension : Mass-Density-Dimmension (d/ mass-dimmension volume-dimmension))
(def/cast: charge-density-dimmension : Charge-Density-Dimmension (d/ charge-dimmension volume-dimmension))

(def/cast: velocity-dimmension : Velocity-Dimmension (d/ length-dimmension time-dimmension))
(def/cast: acceleration-dimmension : Acceleration-Dimmension (d/ velocity-dimmension time-dimmension))
(def/cast: force-dimmension : Force-Dimmension (d* mass-dimmension acceleration-dimmension))
(def/cast: momentum-dimmension : Momentum-Dimmension (d* mass-dimmension velocity-dimmension))

(def/cast: energy-dimmension : Energy-Dimmension (d* mass-dimmension (dexpt velocity-dimmension 2)))
(define: work-dimmenison : Work-Dimmension energy-dimmension)
(def/cast: power-dimmension : Power-Dimmension (d/ energy-dimmension time-dimmension))

(def/cast: pressure-dimmension : Pressure-Dimmension (d/ force-dimmension area-dimmension))

(def/cast: entropy-dimmension : Entropy-Dimmension (d/ energy-dimmension temperature-dimmension))

(def/cast: electric-field-dimmension : Electric-Field-Dimmension (d/ force-dimmension charge-dimmension))
(def/cast: electric-potential-dimmension : Electric-Potential-Dimmension (d/ energy-dimmension charge-dimmension))
(define: voltage-dimmension : Voltage-Dimmension electric-potential-dimmension)
(define: emf-dimmension : Emf-Dimmension voltage-dimmension)
(def/cast: capacitance-dimmension : Capacitance-Dimmension (d/ charge-dimmension voltage-dimmension))

(def/cast: current-dimmension : Current-Dimmension (d/ charge-dimmension time-dimmension))
(def/cast: current-density-dimmension : Current-Density-Dimmension (d/ current-dimmension area-dimmension))
(def/cast: resistance-dimmension : Resistance-Dimmension (d/ voltage-dimmension current-dimmension))
(def/cast: resistivity-dimmension : Resistivity-Dimmension (d/ electric-field-dimmension current-density-dimmension))
(def/cast: conductivity-dimmension : Conductivity-Dimmension (dexpt resistivity-dimmension -1))

(def/cast: magnetic-field-dimmension : Magnetic-Field-Dimmension (d/ force-dimmension charge-dimmension velocity-dimmension))

(def/cast: electric-flux-dimmension : Electric-Flux-Dimmension (d* electric-field-dimmension area-dimmension))
(def/cast: magnetic-flux-dimmension : Magnetic-Flux-Dimmension (d* magnetic-field-dimmension area-dimmension))

(def/cast: inductance-dimmension : Inductance-Dimmension (d/ emf-dimmension (d/ current-dimmension time-dimmension)))


